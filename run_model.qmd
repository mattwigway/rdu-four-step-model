---
title: Triangle Region Four Step Model
---

This R "notebook" contains a complete (albeit highly simplified, and probably not very good for planning purposes) four-step model for the central Research Triangle region (Orange, Durham, and Wake counties), North Carolina.

First, we need to run some R code to set up the modeling system. This is a "Quarto notebook," which is a file that can mix code and text. Each gray-highlighted "cell" is R code that runs a different part of the travel demand model. You can run each part by clicking the green "play" button in the upper right of each cell in RStudio.

First, we need to load some R "packages" (extensions) for travel demand modeling, which the cell below does. The first time you run this on your computer, it will probably take 5-20 minutes. After that it should only take a few seconds. Run it now.

If you get an error that says a package version greater than something is required, but a different version is loaded, just restart R (Session -> Restart R) and try again. If R asks you if you want to build packages from source, choose "No" (if you choose yes, it will either fail, or work but take much longer, depending on your system setup).

If you get other errors from this cell, first try seeing if the rest of the model runs—some errors may not actually be a problem. If it doesn't, there is probably an issue with version compatibility between your R installation and the packages used for travel modeling. I'm happy to assist to resolve these. I also know the model will run on the computers on the second floor of Davis Library (near the Odum Institute and Research Hub).

The output may appear below the cell, you may need to scroll down to see the rest of the notebook.

```{r include=FALSE}
source("model_internals/setup.R")
```

Next, run the cell below to load the model itself. This will take 15-60 seconds.

```{r}
model = load_model("rdu.model")
```

The model requires a land use scenario as well. We load that here. The land use scenario is just an Excel sheet with the total number of households of different types (e.g. levels of vehicle ownership, income) in each Census tract, the number of jobs in each Census tract, and the locations of the Census tracts.

In many four-step models, a custom set of Transportation Analysis Zones (TAZs) is used; in this model, our TAZs are just Census tracts.

I have provided several land use scenarios:
    - `baseline.xlsx` - This is the baseline (current conditions)
    - `projected.xlsx` - This is the 2030 projected scenario, based roughly on our demographic projections from a few weeks back
    - `compact.xlsx` - This is a 2030 projected scenario where growth is concentrated in downtown Durham, Raleigh, and Chapel Hill

By changing the R code below, you can change what scenario is loaded. Run the cell to load the baseline scenario.

```{r}
landuse = load_landuse_scenario("projected.xlsx")
```

## Trip generation

The first step of the four-step model is trip generation. Here, we generate the productions (number of trips taken by households in each tract) and attractions (number of trips that go to a particular tract). There are different models by trip type (Home-Based Work, Home-Based Other, and Non-Home-Based) and time period (AM Peak, midday, PM Peak, overnight); to give you an idea of what these models look like, we print out two of them before we run the trip generation function. Run the two cells below to print them out.

### Production model, AM Peak home-based work trips

```{r}
summary(model$production_functions$`AM Peak`$HBW)
```

### Attraction model, AM Peak home-based work trips

`C000` is total jobs, `CNS07` is retail jobs, `CNS15` is jobs in education, and `CNS18` is jobs in accomodation and food service.

```{r}
summary(model$attraction_functions$`AM Peak`$HBW)
```

### Running trip generation

Run the cell below to run the trip generation model. This takes a few minutes to run. We save the result in a variable called `trip_ends`, because we have the ends of the trips, but we don't know which productions are associated with which attractions.

```{r}
trip_ends = trip_generation(model, landuse)
```

Now, run the cell below to map how many trips are generated in different locations, by trip type and time of day.

```{r}
map_trip_generation(trip_ends$productions, "AM Peak", "HBW")
```

Since there are no other other features on this map, it's a bit hard to read, but by comparing with other maps of the region you can clearly see that the highest densities of trips are generated by the three major cities: Raleigh, Durham, and Chapel Hill, with lower densities generated by suburban areas and the lowest densities by rural areas.

We can similarly map attractions; run the cell below.

```{r}
map_trip_generation(trip_ends$attractions, "AM Peak", "HBW")
```

As one might expect, the trip attractions for work trips are more concentrated---there are fewer "hotspots," but they attract many more trips per square kilometer—downtown Raleigh in particular, but UNC's campus is also visible.

## Trip distribution

After the trip generation step, we have forecasted the number of trips produced in each zone and attracted to each zone, but we don't know which trips from zone A go to zone B. That is the job of the trip distribution step. In this model, a gravity function is used to distribute trips; trips are more likely to go to destinations with higher attractiveness, but less likely to go to destinations far away. How far away is controlled by the power in the gravity function. Since people may be willing to travel different amounts for different purposes, we estimate separate powers for each of our three trip types. The powers are shown when you run the cell below:

```{r}
model$distribution_betas
```

Now, run the trip distribution step by running the cell below. The result is a table of how many trips of each type occur between each pair of tracts at each time period. This should only take a few seconds.

```{r}
flows = trip_distribution(model, landuse, trip_ends)
```

The trip distribution step is harder to map, because we have a number of trips for every _pair_ of tracts. We'll map the trips originating in Orange County tract 107.05, which is where our Plan 720 Towers apartment project is going to be located in Carrboro (shown in blue). Feel free to experiment with changing the origin tract to where you live, or anywhere else. You can find the Census tract by searching for an address on [Census Reporter](https://censusreporter.org). Run the cell below to create the map.

```{r}
map_trip_distribution(flows, "AM Peak", "HBW", origin_tract="37135010705")
```

As expected, many people are expected to travel to workplaces that are local. But we also see significant travel to downtown Raleigh, Duke Hospital, and Research Triangle Park—these are far away but have a lot of attractions. 

## Mode choice

We have now forecasted how many trips will flow between each pair of tracts, by type and time period. However, we don't know what mode they will use. This is the function of the mode choice model. This model actually has two mode choice models—one for home-based work/other trips and one for non-home-based trips. The reason for this is that the home-based trip model can use information about the home location to improve the model fit. Run the cell below to see the mode choice model for non-home-based trips.

```{r}
summary(model$mode_choice_models$HB)
```

Now, we can apply the mode choice model by running the cell below.

```{r}
flows_by_mode = mode_choice(model, landuse, flows)
```

Now, by running the cell below, we can calculate mode shares. This shows the forecast proportion of all trips at all times of day taken by each mode.

```{r}
get_mode_shares(flows_by_mode)
```

## Network assignemnt/route choice

The last step is to assign the auto trips to the network. Right now, we have forecasted origins, destinations, and modes, but we don't know what roads they use. Often, the two model outputs with the most significant policy implications are congestion levels and emissions. Both require network assignment. Evaluating emissions is beyond the scope of this lesson (if you're interested, check out the [EPA MOVES](https://www.epa.gov/moves) model), but we will model congestion.

In some models, generally in regions where there is much higher transit usage than here in the Research Triangle, there is also a network assignment process for transit.

This model uses an iterative network assignment process known as the Frank-Wolfe algorithm. Run the cell below to assign the forecasted PM Peak trips to the network. This is the most computationally intensive part of the process; it will probably take about 5–10 minutes. As the model runs, it will print out its progress using a metric known as "relative gap"—when it falls below 0.01, the model is finished (this metric is not something you need to remember or know the definition of, but just a tip so you can get a sense of how much longer you have to wait).

```{r}
pm_network_flows = network_assignment(model, landuse, flows_by_mode, "PM Peak")
```

We can map congestion levels based on this data by running the cell below.

```{r}
map_congestion(pm_network_flows, model)
```

This does look like more congestion than I would expect from living here; there are likely inaccuracies in the simple model we're using that would need to be calibrated to match reality if we were actually using it for forecasting.